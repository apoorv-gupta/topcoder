#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class WalkOverATree {
   public:
      int dep;
      vector<bool> vis;
      vector<vector < int > >children;
      void dfs(int s, int d){
         if(vis[s]) return;
         vis[s]=true;
         dep=max(dep, d);
         for(auto x: children[s])
            dfs(x, d+1);
      }
      int maxNodesVisited(vector <int> p, int l) {
         int n = p.size()+1;
         children=vector<vector < int > >(n);
         for(int i=0;i<p.size();++i){
            children[p[i]].push_back(i+1);
            children[i+1].push_back(p[i]);
         }
         vis=vector<bool> (n);
         dep=0;
         dfs(0,0);
         if(dep>=l) return l+1;
         int ans=dep+1;//including origin
         int lrem=l-dep;
         int vrem = n-ans;
         if(vrem >= lrem/2)
            ans+=lrem/2;
         else ans+=vrem;
         return ans;
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
   cout << "Test " << testNum << ": [" << "{";
   for (int i = 0; int(p0.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << p0[i];
   }
   cout << "}" << "," << p1;
   cout << "]" << endl;
   WalkOverATree *obj;
   int answer;
   obj = new WalkOverATree();
   clock_t startTime = clock();
   answer = obj->maxNodesVisited(p0, p1);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p2 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p2;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   vector <int> p0;
   int p1;
   int p2;

   {
      // ----- test 0 -----
      int t0[] = {0,0};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 2;
      p2 = 2;
      all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      int t0[] = {0,0};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 3;
      p2 = 3;
      all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      int t0[] = {0,1,2,3};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 2;
      p2 = 3;
      all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      int t0[] = {0,0,0,0,2,4,2,3,1};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 1;
      p2 = 2;
      all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      int t0[] = {0,0,1,2,3,2,3,1,3,0,1,8,6,8,0,5,15,0,9};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 4;
      p2 = 5;
      all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 5 -----
      int t0[] = {0,0,0,1,1,3,5,1,4,5,2,2,10,5,10,10,11,13,8,3,18,15,20,20,23,8,11,26,4};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 26;
      p2 = 17;
      all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 6 -----
      int t0[] = {0,0,2,0};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 100;
      p2 = 5;
      all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 7 -----
      int t0[] = {0,0,2};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 4;
      p2 = 4;
      all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
