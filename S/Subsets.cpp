#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Subsets {
public:
   int ones;
   int n;
   vector<pair < int, int > > inp;
   int count(int ind, int f, int p, int s) {
      if(p>s+ones) return 0;

      int req = p-s;//always non negative without ones
      if(ind>=n) return ones-req;

      int ans = 0;//this config has these many valid subsets
      if(f<inp[ind].second){
         int next = inp[ind].first;
         ans+=count(ind,f+1,p*next,s+next);
      }
      ans+=count(ind+1,0,p,s);
      return ans;
   }
   int findSubset(vector <int> a) {
      sort(a.begin(), a.end());
      vector<pair < int, int > > inp;
      int prev=a[0]-1;

      for(int i=0;i<a.size();++i) 
         if(a[i]==prev) inp[inp.size()-1].second++;
         else{
            inp.push_back(pair < int, int > (a[i],1));
            prev=a[i];
         }

      this->inp = inp;
      this->n = inp.size();

      int ans=0;
      if(inp[0].first!=1) return 0;
      ones=inp[0].second;
      ans=count(1,0,1,0);
      return ans;
   }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
   cout << "Test " << testNum << ": [" << "{";
   for (int i = 0; int(p0.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << p0[i];
   }
   cout << "}";
   cout << "]" << endl;
   Subsets *obj;
   int answer;
   obj = new Subsets();
   clock_t startTime = clock();
   answer = obj->findSubset(p0);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p1 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p1;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   vector <int> p0;
   int p1;
   {
      // ----- test 0 -----
      int t0[] = {1,1,1};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 2;
      all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      int t0[] = {1,1,1,1,2,2,2,2};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 13;
      all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
      // ------------------
   }
   {
      // ----- test 2 -----
      int t0[] = {1,2,3,4};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 3;
      all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
      // ------------------
   }
   {
      // ----- test 3 -----
      int t0[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,10,20,30,40,50};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 77;
      all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      int t0[] = {1,1,1,1,1,1,1,1,1,1,1,2,3,4,2,2,2};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 100;
      all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 5 -----
      int t0[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 8050;
      all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 6 -----
      int t0[] = {5,3};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 0;
      all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
      // ------------------
   }
   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
