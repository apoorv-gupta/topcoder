#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ShoppingSurveyDiv2 {
public:
	int minValue(int n, vector <int> s) {
           //n people, m items
           int m = s.size();
           for(int ans=0;ans<=n;++ans){
              vector < int > tmp(s);
              for(int i=0;i<m;++i)
                 tmp[i]-=ans;
              int big = n-ans;
              int carry=0;//so many people missed at least one item so far
              for(int i=0;big&&(i<m);++i){
                 if(carry>=tmp[i]){
                    big=0;
                    break;
                 }
                 tmp[i]-=carry;
                 carry+=(big-tmp[i]);
                 big=tmp[i];
              }
              if(big==0)
                 return ans;
           }
           return n;
        }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
   cout << "Test " << testNum << ": [" << p0 << "," << "{";
   for (int i = 0; int(p1.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << p1[i];
   }
   cout << "}";
   cout << "]" << endl;
   ShoppingSurveyDiv2 *obj;
   int answer;
   obj = new ShoppingSurveyDiv2();
   clock_t startTime = clock();
   answer = obj->minValue(p0, p1);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p2 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p2;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   int p0;
   vector <int> p1;
   int p2;

   {
      // ----- test 0 -----
      p0 = 5;
      int t1[] = {3,3};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = 1;
      all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      p0 = 100;
      int t1[] = {97};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = 97;
      all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      p0 = 10;
      int t1[] = {9,9,9,9,9};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = 5;
      all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      p0 = 7;
      int t1[] = {1,2,3};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = 0;
      all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      p0 = 5;
      int t1[] = {3,3,3};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = 0;
      all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
