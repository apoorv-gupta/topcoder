#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SpecialStrings {
   public:
      int checkspl(const string &s,int n) {
         for(int i=1;i<n;++i)
            if(s.substr(0,i)>=s.substr(i,n-i))
               return 0;
         return 1;
      }
      int inc(string &s, int n){
         int i;
         for(i=n-1;i>=0;--i)
            if(s[i]=='0'){ s[i]++; break;}
         if(i<0) return 0;
         i++;
         while(i<n){
            s[i]='0';
            i++;
         }
         return 1;
      }
      string findNext(string c) {
         int n =c.size();
         if(!inc(c,n)) return "";
         for(int i=0;i<n;++i){
            if(c[i]=='1') continue;
            string s = c;//c[i]=0
            for(int j=i+1;j<n;++j) s[j]='1';
            if(!checkspl(s,n)){
               c[i]='1';
               for(int j=i+1;j<n;++j) c[j]='0';
            }
         }
         cout<<c<<endl;
         if(!checkspl(c,n)) return "";
         return c;
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SpecialStrings *obj;
	string answer;
	obj = new SpecialStrings();
	clock_t startTime = clock();
	answer = obj->findNext(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "01";
	p1 = "";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "00101";
	p1 = "00111";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "0010111";
	p1 = "0011011";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "000010001001011";
	p1 = "000010001001101";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "01101111011110111";
	p1 = "01101111011111111";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
