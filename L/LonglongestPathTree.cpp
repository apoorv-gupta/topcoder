#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>
#include<cstring>

using namespace std;
typedef pair<long long int,long long int> ii;
typedef vector<ii> vii;
#define MAX 2048
class LonglongestPathTree {
   public:
      int n;
      vii ed[MAX];
      char vis[MAX];
      long long int dist[MAX];

      void bfs(int root, int rm1, int rm2){
         for(int i=0;i<n;++i)
            dist[i]=LLONG_MAX;
         memset(vis,0,sizeof(vis));
         queue<ii> q;
         q.push(ii(root,0));
         while(!q.empty()){
            ii tmp=q.front();
            q.pop();
            int v = tmp.first;
            long long int w = tmp.second;
            dist[v]=w;
            vis[v]=1;
            for(int i=0;i<ed[v].size();++i){
               int vv = ed[v][i].first;
               long long int ww = ed[v][i].second;
               if(vis[vv]) continue;
               if((min(v,vv)==min(rm1,rm2))&&(max(v,vv)==max(rm1,rm2))) continue;
               q.push(ii(vv,w+ww));
            }
         }
      }

      long long int dia(int root,int rm1, int rm2){
         bfs(root,rm1,rm2);
         int bt = -1;
         for(int i=0;i<n;++i)
            if(dist[i]!=LLONG_MAX)
               if((bt==-1)||(dist[bt]<dist[i]))
                  bt = i;
         bfs(bt,rm1,rm2);
         bt = -1;
         long long int ans = 0;
         for(int i=0;i<n;++i)
            if(dist[i]!=LLONG_MAX)
               ans=max(ans,dist[i]);
         return ans;
      }
      long long getLength(vector <int> A, vector <int> B, vector <int> L) {
         long long int ans =-1;
         n=A.size()+1;
         for(int i=0;i<n;++i)
            ed[i].clear();
         for(int i=0;i<A.size();++i){
            int f = A[i];
            int t = B[i];
            int w = L[i];
            ed[f].push_back(ii(t,w));
            ed[t].push_back(ii(f,w));
         }
         for(int i=0;i<A.size();++i){
            int rm1=A[i];
            int rm2=B[i];
            //remove ith edge
            long long int lt = -1,rt=-1;

            memset(vis,0,sizeof(vis));
            lt = dia(rm1, rm1, rm2);
            rt = dia(rm2, rm1, rm2);

            ans=max(ans,lt+rt+L[i]);
         }
         return ans;
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, long long p3) {
   cout << "Test " << testNum << ": [" << "{";
   for (int i = 0; int(p0.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << p0[i];
   }
   cout << "}" << "," << "{";
   for (int i = 0; int(p1.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << p1[i];
   }
   cout << "}" << "," << "{";
   for (int i = 0; int(p2.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << p2[i];
   }
   cout << "}";
   cout << "]" << endl;
   LonglongestPathTree *obj;
   long long answer;
   obj = new LonglongestPathTree();
   clock_t startTime = clock();
   answer = obj->getLength(p0, p1, p2);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p3 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p3;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   vector <int> p0;
   vector <int> p1;
   vector <int> p2;
   long long p3;

   {
      // ----- test 0 -----
      int t0[] = {0,0,0};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      int t1[] = {1,2,3};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      int t2[] = {2,4,8};
      p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
      p3 = 14ll;
      all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      int t0[] = {0,1,2,3};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      int t1[] = {1,2,3,4};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      int t2[] = {1,2,3,4};
      p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
      p3 = 10ll;
      all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      int t0[] = {0,1,0,3,0,6,7,7,8,9,11};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      int t1[] = {1,2,3,4,5,5,5,8,9,10,9};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      int t2[] = {100,1000,100,1000,1,10,10,10,10,100,100};
      p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
      p3 = 2410ll;
      all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      int t0[] = {1,5,6,4,4,0,3,3};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      int t1[] = {6,6,4,8,0,3,2,7};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      int t2[] = {1,1,1,1,1,1,1,1};
      p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
      p3 = 7ll;
      all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      int t0[] = {0,1,2,3,0,1,2,3,4};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      int t1[] = {1,2,3,4,5,6,7,8,9};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      int t2[] = {10,1,1,10,10,1000,100,1000,10};
      p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
      p3 = 2122ll;
      all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
      // ------------------
   }
   {
      // --test 5--
      int t0[] = {3, 249, 1, 77, 327, 94, 443, 9, 503, 99, 505, 413, 491, 202, 402, 314, 401, 290, 104, 205, 204, 210, 435, 237, 192, 448, 248, 355, 210, 231, 145, 474, 66, 468, 460, 390, 408, 232, 491, 182, 283, 291, 295, 92, 149, 203, 429, 286, 446, 284, 114, 312, 268, 226, 516, 26, 27, 503, 209, 86, 5, 11, 338, 400, 41, 189, 322, 24, 280, 51, 394, 397, 446, 231, 365, 449, 163, 46, 239, 250, 362, 163, 402, 377, 120, 65, 27, 226, 461, 434, 227, 164, 505, 279, 176, 334, 318, 226, 372, 444, 3, 220, 6, 128, 260, 337, 96, 314, 509, 470, 118, 131, 374, 447, 12, 258, 96, 326, 107, 157, 147, 351, 103, 327, 355, 173, 132, 341, 274, 434, 102, 19, 229, 315, 131, 239, 199, 32, 366, 517, 117, 9, 113, 65, 150, 51, 362, 105, 391, 110, 439, 419, 152, 483, 145, 214, 114, 507, 252, 223, 68, 441, 197, 191, 230, 87, 326, 253, 483, 88, 353, 321, 324, 325, 298, 210, 57, 140, 37, 154, 285, 291, 270, 418, 65, 432, 86, 296, 390, 86, 11, 310, 320, 320, 468, 389, 150, 219, 370, 8, 161, 313, 7, 334, 109, 53, 90, 311, 168, 419, 289, 127, 519, 167, 220, 149, 48, 85, 487, 320, 473, 123, 3, 437, 241, 236, 519, 442, 304, 234, 51, 278, 393, 373, 265, 54, 314, 130, 64, 420, 381, 113, 327, 427, 55, 65, 513, 121, 111, 62, 116, 149, 196, 207, 49, 266, 178, 504, 493, 470, 109, 481, 89, 127, 17, 213, 60, 483, 246, 356, 203, 215, 418, 76, 443, 321, 474, 280, 517, 86, 71, 333, 36, 34, 173, 171, 292, 144, 345, 386, 130, 32, 86, 259, 397, 511, 478, 18, 461, 339, 357, 130, 14, 99, 43, 180, 420, 218, 438, 422, 372, 262, 426, 348, 154, 12, 233, 255, 27, 72, 56, 175, 298, 424, 350, 9, 410, 409, 193, 73, 90, 5, 396, 467, 211, 287, 477, 58, 174, 488, 246, 411, 431, 103, 186, 482, 273, 23, 416, 501, 107, 336, 143, 410, 502, 233, 156, 45, 147, 37, 462, 182, 305, 12, 326, 243, 393, 340, 385, 499, 12, 223, 300, 247, 98, 225, 7, 38, 70, 94, 61, 279, 13, 335, 119, 477, 197, 65, 334, 197, 10, 380, 125, 171, 301, 342, 133, 365, 148, 447, 35, 347, 7, 199, 281, 509, 350, 320, 173, 59, 0, 499, 4, 484, 417, 352, 211, 190, 101, 360, 360, 260, 179, 172, 472, 2, 363, 256, 56, 356, 143, 364, 3, 263, 123, 381, 2, 394, 269, 126, 155, 305, 341, 431, 368, 271, 466, 180, 388, 295, 170, 470, 414, 85, 75, 64, 316, 244, 84, 242, 358, 453, 20, 201, 410, 499, 160, 76, 172, 74, 92, 445, 156, 367, 11, 172, 447, 136, 64, 394, 480, 479, 55, 263, 348, 52, 499, 6, 78, 252, 415, 331, 22, 191, 208, 288, 395, 301, 379, 79, 12, 46, 502, 389, 419, 332, 260, 297, 379, 299, 217, 391, 376, 151, 210, 363, 426, 296, 85};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      int t1[]= {318, 500, 243, 66, 150, 268, 404, 109, 317, 93, 64, 267, 363, 225, 40, 303, 293, 393, 493, 1, 421, 344, 213, 246, 56, 168, 504, 451, 334, 97, 245, 137, 379, 463, 143, 37, 412, 199, 15, 165, 320, 164, 235, 48, 458, 41, 31, 234, 149, 233, 27, 175, 167, 357, 449, 92, 382, 410, 336, 292, 95, 221, 438, 22, 195, 33, 151, 269, 265, 333, 121, 148, 151, 150, 171, 319, 34, 307, 486, 210, 14, 114, 130, 313, 84, 515, 43, 36, 183, 247, 273, 497, 128, 122, 31, 378, 204, 444, 407, 146, 501, 141, 387, 236, 494, 398, 75, 92, 85, 481, 182, 469, 208, 496, 130, 245, 510, 383, 80, 440, 30, 180, 459, 25, 273, 320, 274, 166, 447, 455, 405, 382, 65, 390, 6, 69, 83, 519, 37, 323, 187, 38, 251, 189, 330, 82, 308, 171, 269, 181, 142, 489, 368, 36, 310, 180, 254, 464, 130, 514, 65, 476, 480, 114, 363, 463, 316, 240, 172, 36, 238, 169, 73, 305, 385, 320, 289, 308, 112, 117, 313, 361, 188, 515, 36, 333, 281, 495, 295, 318, 436, 282, 503, 130, 172, 392, 375, 328, 334, 309, 422, 410, 114, 144, 119, 160, 47, 133, 178, 427, 306, 353, 446, 456, 89, 89, 70, 194, 326, 113, 113, 445, 48, 319, 201, 440, 100, 427, 106, 49, 56, 5, 3, 352, 407, 427, 16, 191, 365, 320, 276, 258, 422, 369, 56, 279, 149, 428, 280, 397, 443, 329, 326, 116, 26, 22, 390, 313, 52, 517, 11, 264, 110, 94, 380, 78, 45, 355, 334, 335, 355, 229, 275, 158, 516, 201, 28, 405, 233, 12, 178, 300, 349, 259, 293, 58, 516, 457, 34, 85, 129, 485, 188, 423, 222, 97, 418, 174, 356, 283, 476, 412, 446, 159, 184, 272, 450, 486, 326, 159, 454, 316, 500, 412, 483, 206, 403, 337, 434, 130, 134, 261, 31, 240, 484, 517, 261, 119, 296, 498, 166, 200, 292, 83, 36, 433, 115, 471, 401, 172, 240, 349, 512, 38, 34, 130, 446, 314, 28, 492, 418, 109, 120, 384, 81, 289, 162, 173, 446, 503, 27, 413, 12, 327, 304, 191, 299, 443, 426, 465, 365, 258, 216, 138, 361, 275, 395, 193, 8, 395, 111, 22, 168, 177, 73, 82, 508, 361, 224, 198, 82, 357, 150, 343, 322, 173, 168, 153, 200, 507, 181, 101, 399, 97, 452, 359, 212, 51, 337, 246, 221, 29, 334, 463, 274, 18, 506, 230, 8, 135, 420, 136, 314, 328, 70, 335, 474, 502, 518, 44, 273, 62, 166, 453, 124, 367, 261, 53, 52, 86, 294, 426, 302, 349, 226, 305, 120, 166, 326, 354, 407, 280, 327, 227, 27, 397, 114, 442, 139, 31, 143, 67, 144, 425, 419, 503, 91, 251, 346, 346, 42, 67, 500, 236, 406, 277, 51, 142, 273, 38, 36, 107, 63, 228, 108, 180, 201, 333, 490, 118, 34, 22, 475, 297, 86, 75, 445, 257, 21, 73, 323, 420, 265, 173, 294, 220, 14, 287, 148, 185, 70, 371, 391, 218, 490, 503, 430, 39, 50};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      int t2[] = {999999438, 999999962, 999999184, 999999396, 999999722, 999999088, 999999593, 999999436, 999999944, 999999983, 999999297, 999999390, 999999258, 999999673, 999999618, 999999478, 999999779, 999999636, 999999787, 999999018, 999999502, 999999979, 999999763, 999999363, 999999772, 999999445, 999999829, 999999915, 999999535, 999999111, 999999298, 999999082, 999999458, 999999178, 999999690, 999999951, 999999021, 999999482, 999999537, 999999863, 999999883, 999999052, 999999033, 999999727, 999999266, 999999405, 999999700, 999999881, 999999230, 999999699, 999999111, 999999809, 999999492, 999999189, 999999149, 999999262, 999999431, 999999945, 999999337, 999999424, 999999942, 999999610, 999999826, 999999828, 999999912, 999999814, 999999989, 999999264, 999999029, 999999977, 999999828, 999999839, 999999165, 999999956, 999999192, 999999765, 999999949, 999999020, 999999119, 999999856, 999999141, 999999850, 999999127, 999999179, 999999403, 999999455, 999999919, 999999354, 999999406, 999999580, 999999128, 999999501, 999999090, 999999915, 999999983, 999999789, 999999495, 999999447, 999999624, 999999280, 999999865, 999999628, 999999570, 999999558, 999999949, 999999647, 999999813, 999999583, 999999641, 999999389, 999999300, 999999707, 999999945, 999999299, 999999251, 999999991, 999999593, 999999273, 999999856, 999999560, 999999207, 999999390, 999999266, 999999530, 999999636, 999999258, 999999490, 999999615, 999999910, 999999686, 999999116, 999999711, 999999128, 999999140, 999999996, 999999970, 999999101, 999999182, 999999217, 999999102, 999999159, 999999264, 999999027, 999999889, 999999778, 999999518, 999999876, 999999110, 999999208, 999999555, 999999641, 999999024, 999999515, 999999375, 999999557, 999999433, 999999092, 999999447, 999999194, 999999640, 999999191, 999999634, 999999496, 999999108, 999999971, 999999095, 999999697, 999999875, 999999883, 999999040, 999999930, 999999010, 999999175, 999999813, 999999675, 999999619, 999999872, 999999241, 999999601, 999999240, 999999406, 999999790, 999999009, 999999810, 999999946, 999999032, 999999251, 999999736, 999999754, 999999706, 999999768, 999999888, 999999841, 999999123, 999999468, 999999096, 999999635, 999999959, 999999554, 999999835, 999999497, 999999733, 999999227, 999999370, 999999841, 999999780, 999999980, 999999496, 999999467, 999999470, 999999539, 999999692, 999999436, 999999648, 999999056, 999999437, 999999980, 999999655, 999999876, 999999736, 999999166, 999999371, 999999243, 999999841, 999999763, 999999553, 999999481, 999999371, 999999070, 999999306, 999999110, 999999096, 999999005, 999999573, 999999818, 999999552, 999999397, 999999862, 999999503, 999999345, 999999899, 999999931, 999999241, 999999779, 999999026, 999999915, 999999471, 999999114, 999999337, 999999502, 999999095, 999999872, 999999728, 999999427, 999999243, 999999897, 999999494, 999999284, 999999262, 999999700, 999999317, 999999898, 999999502, 999999594, 999999945, 999999297, 999999159, 999999993, 999999099, 999999330, 999999699, 999999678, 999999672, 999999386, 999999540, 999999957, 999999993, 999999022, 999999069, 999999504, 999999064, 999999860, 999999156, 999999354, 999999552, 999999969, 999999753, 999999912, 999999275, 999999709, 999999676, 999999389, 999999432, 999999070, 999999457, 999999187, 999999715, 999999743, 999999218, 999999440, 999999219, 999999872, 999999849, 999999463, 999999994, 999999859, 999999171, 999999450, 999999167, 999999514, 999999491, 999999192, 999999451, 999999817, 999999212, 999999460, 999999606, 999999741, 999999349, 999999968, 999999512, 999999715, 999999634, 999999115, 999999791, 999999343, 999999527, 999999721, 999999188, 999999177, 999999869, 999999475, 999999117, 999999288, 999999824, 999999587, 999999936, 999999868, 999999150, 999999321, 999999165, 999999813, 999999504, 999999754, 999999417, 999999118, 999999926, 999999078, 999999106, 999999135, 999999501, 999999063, 999999478, 999999454, 999999489, 999999097, 999999786, 999999811, 999999929, 999999965, 999999564, 999999430, 999999261, 999999755, 999999400, 999999026, 999999624, 999999931, 999999044, 999999430, 999999702, 999999707, 999999923, 999999993, 999999469, 999999150, 999999514, 999999377, 999999403, 999999097, 999999819, 999999656, 999999204, 999999886, 999999917, 999999342, 999999104, 999999621, 999999593, 999999756, 999999934, 999999374, 999999819, 999999062, 999999524, 999999472, 999999230, 999999647, 999999074, 999999759, 999999957, 999999594, 999999794, 999999815, 999999625, 999999772, 999999337, 999999099, 999999765, 999999636, 999999258, 999999317, 999999067, 999999686, 999999879, 999999580, 999999205, 999999523, 999999016, 999999048, 999999172, 999999801, 999999407, 999999861, 999999489, 999999898, 999999993, 999999657, 999999318, 999999125, 999999894, 999999326, 999999786, 999999135, 999999835, 999999158, 999999774, 999999984, 999999652, 999999706, 999999596, 999999966, 999999084, 999999770, 999999417, 999999491, 999999008, 999999746, 999999886, 999999941, 999999272, 999999810, 999999571, 999999754, 999999339, 999999794, 999999814, 999999256, 999999981, 999999951, 999999159, 999999550, 999999091, 999999809, 999999277, 999999629, 999999744, 999999088, 999999892, 999999573, 999999087, 999999835, 999999293, 999999471, 999999912, 999999863, 999999292, 999999750, 999999431, 999999904, 999999904, 999999269, 999999896, 999999178, 999999550, 999999999, 999999851, 999999461, 999999738, 999999722, 999999776, 999999530, 999999267, 999999889, 999999337, 999999608, 999999108, 999999380, 999999650, 999999261, 999999818, 999999897, 999999674, 999999733, 999999617, 999999752, 999999055, 999999309, 999999830, 999999487, 999999347, 999999030, 999999907, 999999674, 999999889, 999999961, 999999492, 999999337, 999999582};
      p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
      p3 = 39999982122L;
      all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;

   }



   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

