#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<climits>
using namespace std;


class OrderOfOperations {
   public:
      int minTime(vector <string> s) {
         int n = s.size();
         int m = s[0].size();
         int req=0;
         vector < int > hashv(n);
         int comb = 1<<m;
         vector < int > ans(comb, INT_MAX/2);
         for(int i=0;i<n;++i){
            for(int j=0;j<m;++j)
               if(s[i][j]=='1')
                  hashv[i]|=(1<<j);
            req|=hashv[i];
         }
         ans[0]=0;
         for(int bits=0;bits<comb;++bits){
            for(int i=0;i<n;++i){
               int newb = bits|hashv[i];
               int intersection= __builtin_popcount(bits) + __builtin_popcount(hashv[i])-__builtin_popcount(bits|hashv[i]);
               int k = __builtin_popcount(hashv[i])-intersection;
               ans[newb]=min(ans[newb],ans[bits]+k*k);
            }
         }
         return ans[req];
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
   cout << "Test " << testNum << ": [" << "{";
   for (int i = 0; int(p0.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << "\"" << p0[i] << "\"";
   }
   cout << "}";
   cout << "]" << endl;
   OrderOfOperations *obj;
   int answer;
   obj = new OrderOfOperations();
   clock_t startTime = clock();
   answer = obj->minTime(p0);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p1 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p1;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   vector <string> p0;
   int p1;

   {
      // ----- test 0 -----
      string t0[] = {"111","001","010"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 3;
      all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      string t0[] = {"11101","00111","10101","00000","11000"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 9;
      all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      string t0[] = {"11111111111111111111"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 400;
      all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      string t0[] = {"1000","1100","1110"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 3;
      all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      string t0[] = {"111","111","110","100"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 3;
      all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
