#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ChooseTheBestOne {
public:
	int countNumber(int n) {
           vector < int > sim(n);
           for(int i=0;i<n;++i) sim[i]=i+1;
           int r=1;
           int st=0;
           while(sim.size()>1) {
              int off= (r*r)%sim.size();
              off*=r;
              off%=sim.size();
              int ind = st+off-1;
              ind = (ind+sim.size())%sim.size();
              for(int i=ind+1;i<sim.size();++i)
                 sim[i-1]=sim[i];
              sim.resize(sim.size()-1);
              r++;
              st=ind;
           }
           return sim[0];
        }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
   cout << "Test " << testNum << ": [" << p0;
   cout << "]" << endl;
   ChooseTheBestOne *obj;
   int answer;
   obj = new ChooseTheBestOne();
   clock_t startTime = clock();
   answer = obj->countNumber(p0);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p1 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p1;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   int p0;
   int p1;

   {
      // ----- test 0 -----
      p0 = 3;
      p1 = 2;
      all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
      // ------------------
   }
   {
      // ----- test 1 -----
      p0 = 6;
      p1 = 6;
      all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
      // ------------------
   }

        {
   // ----- test 2 -----
   p0 = 10;
   p1 = 8;
   all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
   // ------------------
   }

   {
   // ----- test 3 -----
   p0 = 1234;
   p1 = 341;
   all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
   // ------------------
   }
   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
