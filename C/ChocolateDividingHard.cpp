#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ChocolateDividingHard {
   public:
      vector<vector < int > > cumsum;
      int m,n;
      int sum(int r1, int c1, int r2, int c2){
         //excluding r2, c2
         return cumsum[r2-1][c2-1]-cumsum[r2-1][c1-1]-cumsum[r1-1][c2-1]+cumsum[r1-1][c1-1];
      }
      bool checkminsum(int rb, int re,vector < int > &c,int rmin){
            for(int j=0;j<4;++j){
               //include (rb,c[j])
               //exclude (re,c[j+1])
               int val=sum(rb,c[j],re,c[j+1]);
               if(val<rmin)
                  return false;
            }
         return true;
      }
      int tryr(int rmin){
         for(int c1=1;c1<=n-1;c1++)
            for(int c2=c1+1;c2<=n-1;c2++)
               for(int c3=c2+1;c3<=n-1;c3++){
                  vector < int > c;
                  c.push_back(1);
                  c.push_back(c1+1);
                  c.push_back(c2+1);
                  c.push_back(c3+1);
                  c.push_back(n+1);
                  //now choose r1, r2, r3
                  int prev=1;//contains the row from where we should sum
                  int fail=0;
                  for(int i=0;i<3;++i){
                     int hi=m+1;
                     int lo=prev+1;// we will be excluding the result of bin search
                     int ans=-1;
                     //bin search for r
                     while(hi>=lo){
                        int cur=(hi+lo)/2;
                        if(checkminsum(prev, cur, c, rmin)){
                           hi=cur-1;
                           ans=cur;
                        }
                        else lo=cur+1;
                     }
                     if(ans==-1){
                        fail=1;
                        break;
                     }
                     prev=ans;
                  }
                  if(fail) continue;
                  else if(checkminsum(prev, m+1,c,rmin))
                     return 1;
               }
         return 0;
      }

      int findBest(vector <string> c) {
         m=c.size();
         n=c[0].size();
         for(int i=0;i<m;++i)
            c[i]='0'+c[i]+'0';
         string emp;
         for(int i=0;i<=n+1;++i)
            emp+='0';
         c.push_back(emp);
         reverse(c.begin(), c.end());
         c.push_back(emp);
         reverse(c.begin(), c.end());
         cumsum=vector<vector < int > >(m+2,vector < int >(n+2,0));
         for(int i=1;i<=m+1;++i){
            int running = 0;
            for(int j=0;j<=n+1;++j){
               running+=c[i][j]-'0';
               cumsum[i][j]=cumsum[i-1][j]+running;
            }
         }
         int ans=0;
         int hi=m*n*10;
         int lo = 0;
         while(hi>=lo){
            int mid = (hi+lo)/2;
            if(tryr(mid)){
               ans=mid;
               lo=mid+1;
            }
            else hi=mid-1;
         }
         return ans;
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
   cout << "Test " << testNum << ": [" << "{";
   for (int i = 0; int(p0.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << "\"" << p0[i] << "\"";
   }
   cout << "}";
   cout << "]" << endl;
   ChocolateDividingHard *obj;
   int answer;
   obj = new ChocolateDividingHard();
   clock_t startTime = clock();
   answer = obj->findBest(p0);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p1 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p1;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   vector <string> p0;
   int p1;

   {
      // ----- test 0 -----
      string t0[] = {"95998","21945","23451","99798","74083"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 3;
      all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      string t0[] = {"12942","23456","99798","98998","67675"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 5;
      all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      string t0[] = {"129420","234560","997980","989980","676760"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 6;
      all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      string t0[] = {"75356291270936062","61879202375922897","36129319478450361","06320615547656937","45254744307868843","14920689266495048","71727226106159490","91771159776736563","94812939088509638","56115984810304444","76317596217857418","59753883189643338"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 44;
      all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
