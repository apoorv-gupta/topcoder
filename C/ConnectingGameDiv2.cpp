#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<cstring>
#include<climits>

using namespace std;


class ConnectingGameDiv2 {
   public:
      int getmin(vector <string> b) {
         int size[128]={};
         int dx[]={-1,-1,-1,-0,+0,1,+1,+1};
         int dy[]={-0,-1,+1,-1,+1,0,+1,-1};
         int n =b.size();
         int m =b[0].size();
         for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
               size[b[i][j]]++;

         int opt[128][128]={};
         for(int i=0;i<128;++i)
            for(int j=0;j<128;++j)
               if(i!=j)
                  opt[i][j]=1034567890;
         for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
               for(int k=0;k<8;++k){
                  int newx=i+dx[k];
                  int newy=j+dy[k];
                  if((newx<0)||(newx>=n)) continue;
                  if((newy<0)||(newy>=m)) continue;
                  int col1=b[i][j];
                  int col2=b[newx][newy];
                  if(col1==col2) continue;
                  opt[col1][col2]=size[col2];
                  swap(col1,col2);
                  opt[col1][col2]=size[col2];
               }
         for(int k=0;k<128;++k)
            for(int i=0;i<128;++i)
               for(int j=0;j<128;++j)
                  opt[i][j]=min(opt[i][j], opt[i][k]+opt[k][j]);
         int ans=n*m;
         for(int i=0;i<n;++i)
            for(int j=0;j<n;++j){
               int col1=b[i][0];
               int col2=b[j][m-1];
               ans=min(ans,size[col1]+opt[col1][col2]);
            }
         return ans;
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
   cout << "Test " << testNum << ": [" << "{";
   for (int i = 0; int(p0.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << "\"" << p0[i] << "\"";
   }
   cout << "}";
   cout << "]" << endl;
   ConnectingGameDiv2 *obj;
   int answer;
   obj = new ConnectingGameDiv2();
   clock_t startTime = clock();
   answer = obj->getmin(p0);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p1 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p1;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   vector <string> p0;
   int p1;

   {
      // ----- test 0 -----
      string t0[] = {"AA","BC"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 2;
      all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      string t0[] = {"AAB","ACD","CCD"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 4;
      all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      string t0[] = {"iii","iwi","iii"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 8;
      all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      string t0[] = {"rng58","Snuke","Sothe"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 6;
      all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      string t0[] = {"yyAArJqjWTH5","yyEEruYYWTHG","hooEvutpkkb2","OooNgFFF9sbi","RRMNgFL99Vmm","R76XgFF9dVVV","SKnZUPf88Vee"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 14;
      all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
