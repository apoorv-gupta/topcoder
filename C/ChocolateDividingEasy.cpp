#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<climits>

using namespace std;
#define all(c) (c).begin(),(c).end()

class ChocolateDividingEasy {
public:
   vector<vector < int > > cumsum;
        int sum(int r1, int c1, int r2, int c2){
           //excluding r2, c2
           return cumsum[r2-1][c2-1]-cumsum[r2-1][c1-1]-cumsum[r1-1][c2-1]+cumsum[r1-1][c1-1];
        }
	int findBest(vector <string> c) {
           int m=c.size();
           int n=c[0].size();
           for(int i=0;i<m;++i)
              c[i]='0'+c[i]+'0';
           string emp;
           for(int i=0;i<=n+1;++i)
              emp+='0';
           c.push_back(emp);
           reverse(all(c));
           c.push_back(emp);
           reverse(all(c));
           cumsum=vector<vector < int > >(m+2,vector < int >(n+2,0));
           for(int i=1;i<=m+1;++i){
              int running = 0;
              for(int j=0;j<=n+1;++j){
                 running+=c[i][j]-'0';
                 cumsum[i][j]=cumsum[i-1][j]+running;
              }
           }
           int ans=0;
           for(int r1=1;r1<=m-1;r1++)
           for(int r2=r1+1;r2<=m-1;r2++)
           for(int c1=1;c1<=n-1;c1++)
           for(int c2=c1+1;c2<=n-1;c2++){
              int lans=INT_MAX;
              //top row
              lans=min(lans,sum(1,1,   r1+1,c1+1));
              lans=min(lans,sum(1,c1+1,r1+1,c2+1));
              lans=min(lans,sum(1,c2+1,r1+1,n +1));

              //middle row
              lans=min(lans,sum(r1+1,1   ,r2+1,c1+1));
              lans=min(lans,sum(r1+1,c1+1,r2+1,c2+1));
              lans=min(lans,sum(r1+1,c2+1,r2+1,n +1));

              //bottom row
              lans=min(lans,sum(r2+1,1   ,m+1,c1+1));
              lans=min(lans,sum(r2+1,c1+1,m+1,c2+1));
              lans=min(lans,sum(r2+1,c2+1,m+1,n +1));
              ans=max(lans,ans);
           }
           return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ChocolateDividingEasy *obj;
	int answer;
	obj = new ChocolateDividingEasy();
	clock_t startTime = clock();
	answer = obj->findBest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"9768","6767","5313"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"36753562","91270936","06261879","20237592","28973612","93194784"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 15;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"012","345","678"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
