#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class NumberGameAgain {
public:
   bool ancestor(long long int x,long long int y){
      while(x<y)
         y>>=1;
      if(x==y) return true;
      return false;
   }
   long long int subtree(long long int x, int k){
      int l =0;
      while(x>=(1ll<<l))
         l++;
      long long int ans = (1ll<<(k-l+1))-1;
      return ans;
   }
   long long solve(int k, vector <long long> rm) {
      long long int lim = (((long long)1)<<k);
      long long int ans = lim-2;
      sort(rm.begin(),rm.end());
      for(int i=0;i<rm.size();++i){
         bool fail=false;
         for(int j=0;j<i;++j)
            fail |= ancestor(rm[j],rm[i]);
         if(fail) continue;
         ans-=subtree(rm[i],k);
      }
      return ans;
   }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <long long> p1, bool hasAnswer, long long p2) {
   cout << "Test " << testNum << ": [" << p0 << "," << "{";
   for (int i = 0; int(p1.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << p1[i];
   }
   cout << "}";
   cout << "]" << endl;
   NumberGameAgain *obj;
   long long answer;
   obj = new NumberGameAgain();
   clock_t startTime = clock();
   answer = obj->solve(p0, p1);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p2 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p2;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   int p0;
   vector <long long> p1;
   long long p2;

   {
      // ----- test 0 -----
      p0 = 3;
      long long t1[] = {2ll,4ll,6ll};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = 2ll;
      all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      p0 = 5;
      long long t1[] = {2ll,3ll};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = 0ll;
      all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      p0 = 5;
      p1.clear() /*{}*/;
      p2 = 30ll;
      all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      p0 = 40;
      long long t1[] = {2ll,4ll,8ll,16ll,32141531ll,2324577ll,1099511627775ll,2222222222ll,33333333333ll,4444444444ll,2135ll};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = 549755748288ll;
      all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      p0 = 40;
      p1.clear() /*{}*/;
      p2 = 1099511627774ll;
      all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
