#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef pair<long long int,long long int> pll;
class TaroCoins {
public:
   void rec(vector<pll> &from, vector<pll> &to){
      to.clear();
      if(from.empty()) return;
      sort(from.begin(),from.end());
      long long int last = -1;
      for(int i=0;i<from.size();++i){
         if(from[i].first==last)
            to[to.size()-1].second+=from[i].second;
         else to.push_back(from[i]);
         last = from[i].first;
      }
   }
   long long getNumber(long long N) {
      int bit[100]={};
      for(int i=0;i<100;++i)
         if(N&(1<<i)) bit[i]++;
      long long int ans=0;
      vector<pll> cur;
      vector<long long int> c;
      for(long long int i=1; i<=N ;i*=2)c.push_back(i);
      for(int i=0;i<c.size();++i){
         long long int mult = c[i];
         vector<pll> next;
         for(int j=0;j<cur.size();++j){
            long long int tmp = cur[j].first;
            long long int rem = N-tmp;
            if(rem&(mult-1)) continue;
            next.push_back(pll(cur[j].first, cur[j].second));
            next.push_back(pll(cur[j].first+mult, cur[j].second));
            next.push_back(pll(cur[j].first+mult+mult, cur[j].second));
         }
         next.push_back(pll(mult,1));
         next.push_back(pll(mult*2,1));
         rec(next,cur);
      }
      for(int i=0;i<cur.size();++i){
         printf("(%lld,%lld)   ",cur[i].first, cur[i].second);
         if(cur[i].first==N)
            ans+=cur[i].second;
      }
      printf("\n");
      return ans;
   }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	TaroCoins *obj;
	long long answer;
	obj = new TaroCoins();
	clock_t startTime = clock();
	answer = obj->getNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	
	{
	// ----- test 0 -----
	p0 = 1ll;
	p1 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 6ll;
	p1 = 3ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 47ll;
	p1 = 2ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 256ll;
	p1 = 9ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 8489289ll;
	p1 = 6853ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1000000000ll;
	p1 = 73411ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
