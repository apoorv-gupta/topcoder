#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TheKingsArmyDiv2 {
   public:
      int getNumber(vector <string> s) {
         int r = s.size();
         int c = s[0].size();
         for(int i=0;i<r;++i)
            for(int k=1;k<c;++k)
               if(s[i][k]=='H')
                  if(s[i][k-1]=='H')
                     return 0;
         for(int i=0;i<c;++i)
            for(int k=1;k<r;++k)
               if(s[k][i]=='H')
                  if(s[k-1][i]=='H')
                     return 0;
         for(int i=0;i<r;++i)
            for(int k=0;k<c;++k)
               if(s[i][k]=='H')
                  return 1;
         return 2;
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
   cout << "Test " << testNum << ": [" << "{";
   for (int i = 0; int(p0.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << "\"" << p0[i] << "\"";
   }
   cout << "}";
   cout << "]" << endl;
   TheKingsArmyDiv2 *obj;
   int answer;
   obj = new TheKingsArmyDiv2();
   clock_t startTime = clock();
   answer = obj->getNumber(p0);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p1 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p1;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   vector <string> p0;
   int p1;

   {
      // ----- test 0 -----
      string t0[] = {"SSSSS","SSHHS","SSSSS"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 0;
      all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      string t0[] = {"SSSSS","SSHSH","HSSSS"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 1;
      all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      string t0[] = {"SSS","SSS","SSS"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 2;
      all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      string t0[] = {"HSHSHSH","SSSHSSS","SSHSHSS","SHSHSHS"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 1;
      all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      string t0[] = {"HHSH","HHHS","HSSS","SHSH","HHHS","HSHH","SSSH"};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 0;
      all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
