#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TheKingsTree {
   public:
      int getNumber(vector <int> p) {
         int n = p.size()+1;
         vector<vector < int> > child(n);
         for(int i=0;i<p.size();++i)
            child[p[i]].push_back(i+1);
         vector<vector < int> > cost(n,vector < int >(n+1,1000));//the max cost is 625
         //cost[i][j] is cost of having j reds in the subtree rooted at i
         for(int i=0;i<n;++i)
            if(child[i].empty())
               cost[i][1]=cost[i][0]=1;
         vector<int> subsize(n,1);

         for(int i=n-1;i>=0;--i){
            for(int j=0;j<child[i].size();++j)
               subsize[i]+=subsize[child[i][j]];

            int cur = 0,other = 1;
            vector<vector < int> > lcost(2, vector < int >(n+1,1000));

            lcost[cur][0]=0;//all greens in zero subtrees

            for(int j=0;j<child[i].size();++j){
               int subroot = child[i][j];
               swap(cur,other);
               for(int k=0; k<=n ;++k)
                  lcost[cur][k]=lcost[other][k]+cost[subroot][0];
               for(int r=0;r<=subsize[i];++r)
                  for(int k = 0;k<=min(r,subsize[subroot]);++k){
                     int exp = cost[subroot][k]+lcost[other][r-k];
                     lcost[cur][r]=min(lcost[cur][r],exp);
                  }
            }
            for(int r=0;r<=subsize[i];++r){
               int g = subsize[i]-r;
               if(r)
                  cost[i][r]=min(r+lcost[cur][r-1], g + lcost[cur][r]);
               else
                  cost[i][r]= g + lcost[cur][r];
            }
         }
         int ans = 1000;
         for(int i=0;i<=n;++i)
            ans=min(ans,cost[0][i]);
         return ans;
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
   cout << "Test " << testNum << ": [" << "{";
   for (int i = 0; int(p0.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << p0[i];
   }
   cout << "}";
   cout << "]" << endl;
   TheKingsTree *obj;
   int answer;
   obj = new TheKingsTree();
   clock_t startTime = clock();
   answer = obj->getNumber(p0);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p1 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p1;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   vector <int> p0;
   int p1;

   {
      // ----- test 0 -----
      int t0[] = {0,0,0};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 4;
      all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      int t0[] = {0,1,2,3,4};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 12;
      all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      int t0[] = {0,1,2,3,1};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 10;
      all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      int t0[] = {0,0,1,0,4,3,5,2,0,7,9,2,4,5,3,1};
      p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
      p1 = 26;
      all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      p0.clear() /*{}*/;
      p1 = 1;
      all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
