#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class BearPlays {
   public:
      int powe(int b, int p, int mod){
         long long int res=1,mult=b;
         while(p){
            if(p&1) res=(res*mult)%mod;
            mult=(mult*mult)%mod;
            p>>=1;
         }
         printf("returning ans %d\n",(int)res);
         return (int)res;
      }
      int pileSize(unsigned int a, unsigned int b, unsigned int k) {
         unsigned int s = a+b;
         long long int ans = (((long long int)a)*powe(2,k,s))%s;
         int other = s-ans;
         return min(other, (int)ans);
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
   cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
   cout << "]" << endl;
   BearPlays *obj;
   int answer;
   obj = new BearPlays();
   clock_t startTime = clock();
   answer = obj->pileSize(p0, p1, p2);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p3 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p3;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   int p0;
   int p1;
   int p2;
   int p3;

   {
      // ----- test 0 -----
      p0 = 4;
      p1 = 7;
      p2 = 2;
      p3 = 5;
      all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      p0 = 5;
      p1 = 5;
      p2 = 3;
      p3 = 0;
      all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      p0 = 2;
      p1 = 6;
      p2 = 1;
      p3 = 4;
      all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      p0 = 2;
      p1 = 8;
      p2 = 2000000000;
      p3 = 2;
      all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      p0 = 900000000;
      p1 = 350000000;
      p2 = 3;
      p3 = 300000000;
      all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
