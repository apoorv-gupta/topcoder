#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<cstring>

using namespace std;

#define MAX 64
int inv[MAX][MAX];
int rinv[MAX][MAX];
class BubbleSortWithReversals {

   public:
      int cntinv(const vector < int > &a, const int b, const int e) {
         int ans=0;
         for(int i=b;i<=e;++i)
            for(int j=i+1;j<=e;++j)
               if(a[j]<a[i])
                  ans++;
            return ans;
      }
      int cntrinv(const vector < int > &a, const int b, const int e) {
         int ans=0;
         for(int i=b;i<=e;++i)
            for(int j=i+1;j<=e;++j)
               if(a[j]>a[i])
                  ans++;
            return ans;
      }
      int getMinSwaps(vector <int> a, const int k) {
         int n = a.size();
         memset(inv,0,sizeof(inv));
         for(int i=0;i<n;++i)
            for(int j=i+1;j<n;++j){
               inv[i][j]=cntinv(a,i,j);
               rinv[i][j]=cntrinv(a,i,j); 
            }

         vector<vector < int > > res(n,vector < int >(k+1,0));

         for(int i=1;i<n;++i){//considering the subarray [0..i]
            for(int kk=1;kk<=k;++kk){
               int best = 0;
               int rbest = res[i-1][kk];
               for(int j=i;j>=0;--j){
                  best = max(best,inv[j][i]-rinv[j][i]);
                  rbest = max(rbest, best + ((j>0)?res[j-1][kk-1]:0));
               }
               res[i][kk] = rbest;
            }
         }
         return inv[0][n-1] - res[n-1][k];
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	BubbleSortWithReversals *obj;
	int answer;
	obj = new BubbleSortWithReversals();
	clock_t startTime = clock();
	answer = obj->getMinSwaps(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	{
	// ----- test 0 -----
	int t0[] = {6,8,8,7,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {7,2,2,13,5,5,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {12,5,1,10,12,6,6,10,6,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 12;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	{
	// ----- test 3 -----
	int t0[] = {2,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	{
	// ----- test 4 -----
	int t0[] = {482,619,619,601,660,660,691,691,77,77,96,77};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	p2 = 22;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
