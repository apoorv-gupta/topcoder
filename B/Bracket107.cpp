#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Bracket107 {
   public:
      vector<vector<int> > dp;
      long long int hashv(string &s){
         long long int ans=0;
         for(int i=0;i<s.size();++i){
            if(s[i]==' ') continue;
            if(s[i]=='(') ans++;
            ans*=2;
         }
         return ans;
      }
      int yetanother(string s) {
         int n = s.size();
         dp=vector<vector < int > >(n,vector < int >(n));
         int len = 0,ans=0;
         vector<long long int> cur;
         for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
               string tmp=s.substr(0,i) + s.substr(i+1);
               tmp=tmp.substr(0,j) + s[i]+tmp.substr(j);
               int ret = lcs(s,tmp);
               if(ret==n) continue;
               if(ret>len){
                  len=ret;
                  ans=0;
                  cur.clear();
               }
               if(ret==len) cur.push_back(hashv(tmp));
            }
         }
         set<long long int> setm(cur.begin(), cur.end());
         return (int)setm.size();
      }
      int check(const string &s){
         int ans=0;
         for(int i=0;i<s.size();++i){
            if(s[i]==' ') continue;
            if(s[i]=='(') ans++;
            else ans--;
            if(ans<0) return 0;
         }
         return ans==0;
      }
      int lcs(const string &a, const string &b){
         //         cout << "comparing "<<a<< " "<<b<<endl;
         if(check(b)==0) return 0;
         int n = a.size();
         for(int i=0;i<n;++i){
            for(int j=0;j<n;++j){
               if(((a[i]==' ')||(b[j]==' '))||(a[i]!=b[j])){
                  int x =0;
                  int y =0;
                  if(i!=0) x=dp[i-1][j];
                  if(j!=0) y=dp[i][j-1];
                  dp[i][j]=max(x,y);
               }
               else{//they are equal
                  if(min(i,j)==0)
                     dp[i][j]=1;
                  else
                     dp[i][j]=1+dp[i-1][j-1];
               }
            }
         }
         //         for(int i=0;i<n;++i){            for(int j=0;j<n;++j)               cout<< "   "<<dp[i][j]<<"  ";            cout<<endl;         }
         //cout<<"common len "<<dp[n-1][n-1]<<endl;
         return dp[n-1][n-1];
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
   cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
   cout << "]" << endl;
   Bracket107 *obj;
   int answer;
   obj = new Bracket107();
   clock_t startTime = clock();
   answer = obj->yetanother(p0);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << p1 << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << answer << endl;
   if (hasAnswer) {
      res = answer == p1;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   string p0;
   int p1;

   {
      // ----- test 0 -----
      p0 = "(())";
      p1 = 1;
      all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      p0 = "(())()";
      p1 = 3;
      all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      p0 = "()()()";
      p1 = 3;
      all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      p0 = "(((())))";
      p1 = 5;
      all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      p0 = "((())())";
      p1 = 9;
      all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
      // ------------------
   }

   {
      // ----- test 5 -----
      p0 = "(((((((((((((((((((((())))))))))))))))))))))";
      p1 = 9;
      all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
