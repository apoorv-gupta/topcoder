#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<cstring>

using namespace std;

#define MAX 64
class IncrementingSequence {
   public:
      vector < int > matchL, matchR,target;
      int n,k;
      vector < int > inp,seen;
      bool e(int a, int b) {
         if(b<a) return false;
         return ((b-a)%k)==0;
      }
      bool bpm( int u )
      {
         for( int v = 0; v < n; v++ ) if( e(inp[u],target[v]) )
         {
            if( seen[v] ) continue;
            seen[v] = true;
            if( matchR[v] < 0 || bpm( matchR[v] ) )
            {
               matchL[u] = v;
               matchR[v] = u;
               return true;
            }
         }
         return false;
      }

      string canItBeDone(int kk, vector <int> a) {
         n = a.size();
         k=kk;
         inp = a;
         target = vector < int > (n);
         for(int i=0;i<n;++i) target[i]=i+1;
         matchL = vector < int >(n,-1);
         matchR = vector < int >(n,-1);
         int rem=n;
         seen = vector < int >(n);
         for(int i=0;i<n;++i){
            fill(seen.begin(),seen.end(),0);
            if(bpm(i)) rem--;
         }
         if(rem==0)
            return "POSSIBLE";
         else
            return "IMPOSSIBLE";
      }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, string p2) {
   cout << "Test " << testNum << ": [" << p0 << "," << "{";
   for (int i = 0; int(p1.size()) > i; ++i) {
      if (i > 0) {
         cout << ",";
      }
      cout << p1[i];
   }
   cout << "}";
   cout << "]" << endl;
   IncrementingSequence *obj;
   string answer;
   obj = new IncrementingSequence();
   clock_t startTime = clock();
   answer = obj->canItBeDone(p0, p1);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << "\"" << p2 << "\"" << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << "\"" << answer << "\"" << endl;
   if (hasAnswer) {
      res = answer == p2;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   int p0;
   vector <int> p1;
   string p2;

   {
      // ----- test 0 -----
      p0 = 3;
      int t1[] = {1,2,4,3};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = "POSSIBLE";
      all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      p0 = 5;
      int t1[] = {2,2};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = "IMPOSSIBLE";
      all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      p0 = 1;
      int t1[] = {1,1,1,1,1,1,1,1};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = "POSSIBLE";
      all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      p0 = 2;
      int t1[] = {5,3,3,2,1};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = "IMPOSSIBLE";
      all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      p0 = 9;
      int t1[] = {1,2,3,1,4,5,6,7,9,8};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = "POSSIBLE";
      all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 5 -----
      p0 = 2;
      int t1[] = {1,1,1,1,1,1,2,2,2,2,2,2};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = "POSSIBLE";
      all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 6 -----
      p0 = 1;
      int t1[] = {1};
      p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
      p2 = "POSSIBLE";
      all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
