#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<cstring>

using namespace std;
#define MAX 64

class InvariantSets {
public:
   int col[MAX];
   vector < int > f;
   vector<vector < int > > cyc;
   vector<vector < int > > p;
   int dfs(int v) {
      if(col[v]==2) return -1;
      else if(col[v]==1){ //cycle detected
         cyc.push_back(vector < int >());
         int ind = cyc.size()-1;
         cyc[ind].push_back(v);
         return ind;
      }
      //visited for the first time
      col[v]=1;
      int ret = dfs(f[v]);
      col[v]=2;
      if((ret!=-1)&&(cyc[ret][0]!=v)){
         cyc[ret].push_back(v);
         return ret;
      }
      else return -1;
   }
   long long int dfs2(int v,int nope) {
      vector < int > &arr = p[v];
      long long int res=1;
      for(int i=0;i<arr.size();++i){
         if(arr[i]!=nope)
            res*=(1+dfs2(arr[i],nope));
      }
      return res;
   }
   long long countSets(vector <int> f) {
      int n = f.size();
      this->f = f;
     p= vector<vector < int > > (n);
      for(int i=0;i<n;++i)
         p[f[i]].push_back(i);
      memset(col,0,sizeof(col));
      for(int i=0;i<n;++i)
         dfs(i);
      long long int ans=1;
      for(int i=0;i<cyc.size();++i){
         vector < int > &c = cyc[i];
         long long int cans=1;
         for(int i=0;i<c.size();++i){
            int pred;
            if(i!=c.size()-1) pred = c[i+1];
            else pred = c[0];
            cans*=dfs2(c[i],pred);
         }
         ans*=(1+cans);
      }
      return ans;
   }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	InvariantSets *obj;
	long long answer;
	obj = new InvariantSets();
	clock_t startTime = clock();
	answer = obj->countSets(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	long long p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,1,2,3,4,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 64ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {12,10,0,4,0,6,3,8,9,14,1,5,6,12,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 90ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
