#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class PowerOfThreeEasy {
public:
	string ableToGet(int fx, int fy) {
           long long int step=1;
           vector < int > pos;
           while((step<=fx)||(step<=fy)){
              pos.push_back(step);
              step*=3;
           }
           for(int mask=(1<<pos.size())-1;mask>=0;--mask){
              long long int sum=0,other=0;
              for(int i=0;i<pos.size();++i)
                 if(mask&(1<<i))
                    sum+=pos[i];
              if(sum!=fx)
                 continue;
              int i;
              for(i=0;(i<pos.size())&&sum;++i)
                 if(mask&(1<<i))
                    sum-=pos[i];
                 else other+=pos[i];
              
              if(other==fy)
                 return "Possible";
              while(i<pos.size()){
                 other+=pos[i];
                 if(other==fy)
                    return "Possible";
                 i++;
              }
           }
           return "Impossible";
        }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
   cout << "Test " << testNum << ": [" << p0 << "," << p1;
   cout << "]" << endl;
   PowerOfThreeEasy *obj;
   string answer;
   obj = new PowerOfThreeEasy();
   clock_t startTime = clock();
   answer = obj->ableToGet(p0, p1);
   clock_t endTime = clock();
   delete obj;
   bool res;
   res = true;
   cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
   if (hasAnswer) {
      cout << "Desired answer:" << endl;
      cout << "\t" << "\"" << p2 << "\"" << endl;
   }
   cout << "Your answer:" << endl;
   cout << "\t" << "\"" << answer << "\"" << endl;
   if (hasAnswer) {
      res = answer == p2;
   }
   if (!res) {
      cout << "DOESN'T MATCH!!!!" << endl;
   } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
      cout << "FAIL the timeout" << endl;
      res = false;
   } else if (hasAnswer) {
      cout << "Match :-)" << endl;
   } else {
      cout << "OK, but is it right?" << endl;
   }
   cout << "" << endl;
   return res;
}
int main() {
   bool all_right;
   all_right = true;

   int p0;
   int p1;
   string p2;

   {
      // ----- test 0 -----
      p0 = 1;
      p1 = 3;
      p2 = "Possible";
      all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 1 -----
      p0 = 1;
      p1 = 1;
      p2 = "Impossible";
      all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 2 -----
      p0 = 3;
      p1 = 0;
      p2 = "Impossible";
      all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 3 -----
      p0 = 1;
      p1 = 9;
      p2 = "Impossible";
      all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 4 -----
      p0 = 3;
      p1 = 10;
      p2 = "Possible";
      all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 5 -----
      p0 = 1093;
      p1 = 2187;
      p2 = "Possible";
      all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
      // ------------------
   }

   {
      // ----- test 6 -----
      p0 = 0;
      p1 = 0;
      p2 = "Possible";
      all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
      // ------------------
   }

   if (all_right) {
      cout << "You're a stud (at least on the example cases)!" << endl;
   } else {
      cout << "Some of the test cases had errors." << endl;
   }
   return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
